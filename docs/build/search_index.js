var documenterSearchIndex = {"docs":
[{"location":"Equilibrium/#Liquids-Theory","page":"Liquids theory","title":"Liquids Theory","text":"","category":"section"},{"location":"Equilibrium/","page":"Liquids theory","title":"Liquids theory","text":"ChebyshevGrids\nUniformGrid\nExponentialGrid\nCheb_plus_U\ngrid_plus_grid\nS_HS_PY\nS_HS_VW\nS_WCA_blip\nβU\nS_RPA\nS_HS_Sticky\ng_HS","category":"page"},{"location":"Equilibrium/#NESCGLE.ChebyshevGrids","page":"Liquids theory","title":"NESCGLE.ChebyshevGrids","text":"ChebyshevGrids(a :: Float64, b :: Float64, N :: Integer)\n\nReturns a Chebyshev nodes and weights[1]\n\nArguments\n\na :: Float64: Initial node.\nb :: Float64: Final node.\nN :: Integer: Number of nodes.\n\nReferences\n\n[1]  C.W. Clenshaw, A.R. Curtis, A method for numerical integration on an automatic computer, Numer. Math. 2 (1960) 197–205.\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.UniformGrid","page":"Liquids theory","title":"NESCGLE.UniformGrid","text":"UniformGrid(a :: Float64, b :: Float64, step :: Float64) = collect(a:step:b)\n\nReturns a uniform grid. Is exactly the same as the fucntion collect.\n\nArguments\n\na :: Float64: Initial point.\nb :: Float64: Final point.\nstep :: Float64: width step.\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.ExponentialGrid","page":"Liquids theory","title":"NESCGLE.ExponentialGrid","text":"ExponentialGrid(a :: Int64, b :: Int64, x₀ :: Float64)\n\nReturn an exponential grid of the form X = {x | x = x10^(n/a) for x in [0,b]} the sugested parameters are a = 5, b = 60.\n\nArguments\n\na :: Int64: Number por points between decade.\nb :: Int64: Number of elements in the array.\nx₀ :: Float64: Initial value.\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.Cheb_plus_U","page":"Liquids theory","title":"NESCGLE.Cheb_plus_U","text":"Cheb_plus_U(x₀ :: Float64, x₁ :: Float64, x₂ :: Float64, N₁ :: Int64, N₂ :: Int64)\n\nAuxiliar function that returns a composed grid by a Chebishev grid and a uniform grid.\n\nArguments\n\nx₀ :: Float64: Initial point.\nx₁ :: Float64: Middle point.\nx₂ :: Float64: Final porint.\nN₁ :: Int64: Number of point in the Chebishev grid.\nN₂ :: Int64: number of point in the uniform grid.\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.grid_plus_grid","page":"Liquids theory","title":"NESCGLE.grid_plus_grid","text":"grid_plus_grid(x :: Array{Float64}, y :: Array{Float64})\n\nAuxiliar fucntion to concat two grids.\n\nArguments\n\nx :: Array{Float64}: First grid.\ny :: Array{Float64}: Second grid.\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.S_HS_PY","page":"Liquids theory","title":"NESCGLE.S_HS_PY","text":"S_HS_PY(ϕ :: Float64, k :: Float64) Returns the Static Structure Factor under the Percus-Yevick Closure[1].\n\nS(k) = frac11 - 24phi c(k)\n\nArguments\n\nϕ :: Float64: the volume fraction.\nk :: Float64: wave vector.\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990.\n\n\n\n\n\nS_HS_PY(ϕ::Float64)\n\nReturns a function to construct the Static Structure Factor under the Percus-Yevick Closure[1].\n\nS(k) = frac11 - 24phi c(k)\n\nArguments\n\nϕ::Float64: the volume fraction.\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990.\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.S_HS_VW","page":"Liquids theory","title":"NESCGLE.S_HS_VW","text":"S_HS_VW(ϕ::Float64)\n\nReturns a function to compute the Static Structure Factor under the Percus-Yevick Closure[1] using the Verlet-Weis correction[2].\n\nS(k) = frac11 - 24phi c(k)\n\nArguments\n\nϕ::Float64: the volume fraction.\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990. [2] Loup Verlet and Jean-Jacques Weis. Phys. Rev. A 5, 939 – Published 1 February 1972\n\n\n\n\n\nS_HS_VW(ϕ::Float64, k::Array{Float64})\n\nReturns aan array that includes the Static Structure Factor under the Percus-Yevick Closure[1] using the Verlet-Weis correction[2].\n\nS(k) = frac11 - 24phi c(k)\n\nArguments\n\nϕ::Float64: the volume fraction.\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990. [2] Loup Verlet and Jean-Jacques Weis. Phys. Rev. A 5, 939 – Published 1 February 1972\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.S_WCA_blip","page":"Liquids theory","title":"NESCGLE.S_WCA_blip","text":"S_WCA_blip(ϕ::Float64, T::Float64; ν = 6)\n\nReturns a function to compute the Static Structure Factor under the Percus-Yevick Closure[1] using the Verlet-Weis correction[2] and the blip function[3].\n\nS(k) = frac11 - 24phi c(k)\n\nArguments\n\nϕ::Float64: the volume fraction.\nT::Real: Temperature.\n\nKeywords\n\nν = 6: Parameter to module the softness of the potential.\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990. [2] Loup Verlet and Jean-Jacques Weis. Phys. Rev. A 5, 939 – Published 1 February 1972 [3] Luis Enrique Sánchez-Díaz, Pedro Ramírez-González, and Magdaleno Medina-Noyola Phys. Rev. E 87, 052306 – Published 22 May 2013\n\n\n\n\n\nS_WCA_blip(ϕ::Float64, T::Float64; ν = 6)\n\nReturns an array that includes the Static Structure Factor under the Percus-Yevick Closure[1] using the Verlet-Weis correction[2] and the blip function[3].\n\nS(k) = frac11 - 24phi c(k)\n\nArguments\n\nϕ::Float64: the volume fraction.\nT::Real: Temperature.\nk::Array{Float64}: wave vector.\n\nKeywords\n\nν = 6: Parameter to module the softness of the potential.\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990. [2] Loup Verlet and Jean-Jacques Weis. Phys. Rev. A 5, 939 – Published 1 February 1972 [3] Luis Enrique Sánchez-Díaz, Pedro Ramírez-González, and Magdaleno Medina-Noyola Phys. Rev. E 87, 052306 – Published 22 May 2013\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.βU","page":"Liquids theory","title":"NESCGLE.βU","text":"βU(params::Array{Float64}, k::Float64, name::String)\n\nAuxiliary function to return the Fourier Transform of the pair interaction potential to evaluate the Random Phase Approximation[1].\n\nArguments\n\nparams::Array{Float64}: List of parameters to evaluate the potential.\nk::Float64: Wave vector.\nname::String: Potential name selector.\n\nReferences\n\n[1] R.V. Sharma and K.C. Sharma. The structure factor and the transport properties of dense fluids having molecules with square well potential are possible generalizations. Physica A: Statistical Mechanics and its Applications, 89(1):213–218, 1977\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.S_RPA","page":"Liquids theory","title":"NESCGLE.S_RPA","text":"S_RPA(params::Vector{Float64}, k::Float64; potential = \"\")\n\nReturns the static structure factor using the random phase approximation[1] of the form\n\nS(k) - frac11 - 24phi c(k) - phibeta u(k)\n\nwhere βu(k) is the Fourier transform of the pair interaction potential.\n\nArguments\n\nparams::Array{Float64}: List of parameters to evaluate the potential.\nk::Float: wave vector.\n\nKeywords\n\npotential = \"\"::String: Potential name selector.\n\nReferences\n\n[1] R.V. Sharma and K.C. Sharma. The structure factor and the transport properties of dense fluids having molecules with square well potential are possible generalizations. Physica A: Statistical Mechanics and its Applications, 89(1):213–218, 1977\n\n\n\n\n\nstructure_factor(params::Vector{Float64}, potential = \"\")\n\nReturns a function to compute the static structure factor using the random phase approximation[1] of the form\n\nS(k) - frac11 - 24phi c(k) - phibeta u(k)\n\nwhere βu(k) is the Fourier transform of the pair interaction potential.\n\nArguments\n\nparams::Array{Float64}: List of parameters to evaluate the potential.\n\nKeywords\n\npotential = \"\"::String: Potential name selector.\n\nReferences\n\n[1] R.V. Sharma and K.C. Sharma. The structure factor and the transport properties of dense fluids having molecules with square well potential are possible generalizations. Physica A: Statistical Mechanics and its Applications, 89(1):213–218, 1977\n\n\n\n\n\nS_RPA(params::Vector{Float64}, k::Vector{Float64}; potential = \"\")\n\nReturns an array with the static structure factor using the random phase approximation[1] of the form\n\nS(k) - frac11 - 24phi c(k) - phibeta u(k)\n\nwhere βu(k) is the Fourier transform of the pair interaction potential.\n\nArguments\n\nparams::Array{Float64}: List of parameters to evaluate the potential.\nk::Vector{Float64}: Wave vector.\n\nKeywords\n\npotential = \"\"::String: Potential name selector.\n\nReferences\n\n[1] R.V. Sharma and K.C. Sharma. The structure factor and the transport properties of dense fluids having molecules with square well potential are possible generalizations. Physica A: Statistical Mechanics and its Applications, 89(1):213–218, 1977\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.S_HS_Sticky","page":"Liquids theory","title":"NESCGLE.S_HS_Sticky","text":"S_HS_Sticky(τ::Float64, ϕ::Float64, k::Float64) Computes the static structure factor of a Stucky Hard Sphere.\n\nArguments\n\nτ::Float64: Temperature.\nϕ::Float64: Volume fraction.\nk::Float64: Wave vector.\n\nReferences\n\n[1] \n\nContributed by O. Joquín'Jaime\n\n\n\n\n\nS_HS_Sticky(τ::Float64, ϕ::Float64, k::Float64)\n\nComputes the static structure factor of a Stucky Hard Sphere.\n\nArguments\n\nτ::Float64: Temperature.\nϕ::Float64: Volume fraction.\nk::Float64: Wave vector.\n\nReferences\n\n[1] \n\nContributed by O. Joquín'Jaime\n\n\n\n\n\n","category":"function"},{"location":"Equilibrium/#NESCGLE.g_HS","page":"Liquids theory","title":"NESCGLE.g_HS","text":"g_HS(η, r)\n\nReturns the pair distribution function for a Hard Spheres system. This is an analytoc solution to the Ornstein-Sernike equation under the Percus-Yevick closure[1].\n\nArguments\n\nη::Real: volume fraction.\nr::Real: distance.\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990.\n\n\n\n\n\n","category":"function"},{"location":"Dynamics/#Dynamics","page":"Dynamics","title":"Dynamics","text":"","category":"section"},{"location":"Dynamics/","page":"Dynamics","title":"Dynamics","text":"dyn_params\nSCGLE\nγ⁻¹\nAsymptotic\nAsymptotic_structure","category":"page"},{"location":"Dynamics/#NESCGLE.dyn_params","page":"Dynamics","title":"NESCGLE.dyn_params","text":"dyn_params(Δt::Float64, t_max::Float64, N::Integer, tolerance::Float64, verbose::Bool)\n\nDynamic parameters configuration for the Self consistent scheme.\n\nMore info: https://github.com/IlianPihlajamaa/ModeCouplingTheory.jl\n\n\n\n\n\n","category":"type"},{"location":"Dynamics/#NESCGLE.SCGLE","page":"Dynamics","title":"NESCGLE.SCGLE","text":"SCGLE(ϕ::Float64, k_array::Vector{Float64}, S_array::Vector{Float64}; dp = dyn_params(), k_max = 7.2)\n\nSelf consistent scheme of the NESCGLE theory. \n\nArguments\n\nϕ::Float64 Volume fraction\nk_array::Vector{Float64} wave vector\nS_array::Vector{Float64} static structure_factor\n\nKeywords\n\ndp = dyn_params() dynamic parameters configuration\nk_max = 7.2 wave vector to save relaxation times\n\nϕ::Float64, karray::Vector{Float64}, Sarray::Vector{Float64}; dp = dynparams(), kmax = 7.2 More info: https://github.com/IlianPihlajamaa/ModeCouplingTheory.jl\n\n\n\n\n\n","category":"function"},{"location":"Dynamics/#NESCGLE.γ⁻¹","page":"Dynamics","title":"NESCGLE.γ⁻¹","text":"γ⁻¹(ϕ::Float64, k::Array{Float64}, S::Array{Float64}, γ::Float64) Fucntion to compute the inverse of the localization length.\n\nArguments\n\nϕ::Float64: Volume fraction.\nk::Array{Float64}: wave vector.\nS::Array{Float64}: Structure factor.\nγ::Float64: Seed value.\n\n\n\n\n\n","category":"function"},{"location":"Dynamics/#NESCGLE.Asymptotic","page":"Dynamics","title":"NESCGLE.Asymptotic","text":"Asymptotic(ϕ, k::Array{Float64}, S::Array{Float64}; flag= false) Function to determine the kind of system studed. The possible outputs can be: *\"Dump\": for no-confident result.\n\n\"Fluid\": For a ergodic state.\n\"Glass\": For an arrested state.\n\"Zero\": For thermodynamic instabilities.\n\nArguments\n\nϕ::Float64: Volume fraction.\nk::Array{Float64}: wave vector.\nS::Array{Float64}: Structure factor.\n\nKeywords\n\nflag = false: Option to print the internal computing steps.\n\n\n\n\n\n","category":"function"},{"location":"Dynamics/#NESCGLE.Asymptotic_structure","page":"Dynamics","title":"NESCGLE.Asymptotic_structure","text":"Asymptotic_structure(ϕ::Float64, k::Array{Float64}, S::Array{Float64}) Function to compute the asymptotic static structure factor.\n\nArguments\n\nϕ::Float64: Volume fraction.\nk::Array{Float64}: wave vector.\nS::Array{Float64}: Structure factor.\n\n\n\n\n\n","category":"function"},{"location":"SM/#Stability-Matrix","page":"Stability Matrix","title":"Stability Matrix","text":"","category":"section"},{"location":"SM/","page":"Stability Matrix","title":"Stability Matrix","text":"Documentation for the StabilityMatrix","category":"page"},{"location":"SM/","page":"Stability Matrix","title":"Stability Matrix","text":"StabilityMatrix\nwave_vector\nstructure_factor\nstructure_factor_function\nnumber_of_species\nparameters\nvolume_fraction\nsystem_str\nSM_HS\nSM_WCA\nSM_SW\nSM_Yukawa\nSM_SALR\nSM_AO\nSM_StickyHS\nupdate_SM\nCopy\nLyapunov_Stability","category":"page"},{"location":"SM/#NESCGLE.StabilityMatrix","page":"Stability Matrix","title":"NESCGLE.StabilityMatrix","text":"StabilityMatrix\n\nInput to evaluate the equation of the Self-Consistent Generalized Langevin Equation theory.\n\nFields\n\nspecies::Integer: list of parameters to define the system of interest. The first parameter in the params array must be the volume fraction, and the Second must be the Temperature.\nparams::Array{Float64}: list of parameters to define the system of interest. The first parameter in the params array must be the volume fraction, and the Second must be the Temperature.\nS::Function: Function to generate the static structure factor.\nk::Array{Float64}: wave vector grid.\nsystem::String: system identifier.\n\n\n\n\n\n","category":"type"},{"location":"SM/#NESCGLE.wave_vector","page":"Stability Matrix","title":"NESCGLE.wave_vector","text":"Returns the wave vector of an input\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.structure_factor","page":"Stability Matrix","title":"NESCGLE.structure_factor","text":"structure_factor(params::Vector{Float64}, system = \"\")\n\nReturns a function to construct the static structure factor for a given system. The systems that are already programmed are:\n\n\"HardSphere\": HS for PY[1].\n\"WCA\": SS under the blip function approximation[3].\n\"SquareWell\": Potential under the RPA.\n\"Yukawa\": Potential under the RPA.\n\"SALR\": Potential under the RPA.\n\"AsakuraOosawa1\": Potential under the RPA.\n\"AsakuraOosawa2\": Potential under the RPA.\n\"StickyHS\": Sticky Hard Sphere.\n\nArguments\n\nparams::Vector{Float64}: list of parameters to evaluate the potential\n\nKeywords\n\nsystem = \"\": System of interest\n\nAbbreviations\n\nHS: Hars Sphere\nPY: Percus-Yevick\nSS: Soft Sphere\nRPA: Random Phase Approximation[4]\n\nReferences\n\n[1] J. P. Hansen and I. McDonald. Theory of Simple Liquids. Academic, London, 1990. [2] Loup Verlet and Jean-Jacques Weis. Phys. Rev. A 5, 939 – Published 1 February 1972 [3] Luis Enrique Sánchez-Díaz, Pedro Ramírez-González, and Magdaleno Medina-Noyola Phys. Rev. E 87, 052306 – Published 22 May 2013 [4] R.V. Sharma and K.C. Sharma. The structure factor and the transport properties of dense fluids having molecules with square well potential are possible generalizations. Physica A: Statistical Mechanics and its Applications, 89(1):213–218, 1977\n\n\n\n\n\nReturns an array with the Static Structure Factor from an input\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.structure_factor_function","page":"Stability Matrix","title":"NESCGLE.structure_factor_function","text":"Returns a function to construct the Static Structure Factor from an input\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.number_of_species","page":"Stability Matrix","title":"NESCGLE.number_of_species","text":"Returns the number of species of the system\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.parameters","page":"Stability Matrix","title":"NESCGLE.parameters","text":"Returns the parameters from an input\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.volume_fraction","page":"Stability Matrix","title":"NESCGLE.volume_fraction","text":"Returns the volume fraction from an input\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.system_str","page":"Stability Matrix","title":"NESCGLE.system_str","text":"Returns the kind of system from an input\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.SM_HS","page":"Stability Matrix","title":"NESCGLE.SM_HS","text":"SM_HS(ϕ::Float64, k::Array{Float64}; VW = false::Bool)\n\nConstructor of an input for a Hard Sphere system.\n\nArguments\n\nϕ::Float64: volume fraction.\nk::Array{Float64}: wave vector array.\n\nKeywords\n\nVW = false::Bool: Verlet-Weis correction[1].\n\nReferences\n\n[1] Loup Verlet and Jean-Jacques Weis. Phys. Rev. A 5, 939 – Published 1 February 1972\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.SM_WCA","page":"Stability Matrix","title":"NESCGLE.SM_WCA","text":"SM_WCA(ϕ::Float64, T::Float64, k::Array{Float64}; ν = 6::Int64)\n\nConstructor for a soft sphere with pair interaction defined by the Weeks–Chandler–Andersen potential[1].\n\nArguments\n\nϕ::Float64: volume fraction.\nT::Float64: Temperature.\nk::Array{Float64}: wave vector array.\n\nKeywords\n\nν = 6::Int64: Parameter to module the softness of the potential.\n\nReferences\n\n[1] Luis Enrique Sánchez-Díaz, Pedro Ramírez-González, and Magdaleno Medina-Noyola Phys. Rev. E 87, 052306 – Published 22 May 2013\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.SM_SW","page":"Stability Matrix","title":"NESCGLE.SM_SW","text":"SM_SW(ϕ::Float64, T::Float64, λ::Float64, k::Array{Float64})\n\nConstructor for an input of hard spheres with a Square Well attractive potential.\n\nArguments\n\nϕ::Float64: volume fraction.\nT::Float64: Dimensionless temperature.\nλ::Float64: range of the well in terms of the diameter sigma.\nk::Array{Float64}: wave vector array.\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.SM_Yukawa","page":"Stability Matrix","title":"NESCGLE.SM_Yukawa","text":"SM_Yukawa(ϕ::Float64, ϵ::Float64, z::Float64, k::Array{Float64})\n\nConstructor for an input of hard spheres with a Yukawa attractive potential[1].\n\nArguments\n\nϕ::Float64: volume fraction.\nϵ::Float64: Aplitude potential (effective charge).\nz::Float64: Inverse screening length.\nk::Float64: Wave vector array.\n\nReferences\n\n[1] Yukawa, H. (1935). \"On the interaction of elementary particles\". Proc. Phys.-Math. Soc. Jpn. 17: 48.\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.SM_SALR","page":"Stability Matrix","title":"NESCGLE.SM_SALR","text":"SM_SALR(ϕ::Float64, ϵ₁::Float64, z₁::Float64, ϵ₂::Float64, z₂::Float64, k::Array{Float64})\n\nConstructor for an input of hard spheres with Sort Attractions and Long Repultions(SALR).\n\nArguments\n\nϕ::Float64: volume fraction.\nϵ₁::Float64: Aplitude potential (effective charge) for the attractive part.\nz₁::Float64: Inverse screening length for the attractive part.\nϵ₂::Float64: Aplitude potential (effective charge) for the repulsive part.\nz₂::Float64: Inverse screening length for the repulsive part.\nk::Float64: Wave vector array.\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.SM_AO","page":"Stability Matrix","title":"NESCGLE.SM_AO","text":"SM_AO(ϕ::Float64, ϕₚ⁽ᴿ⁾ ::Float64, ξ::Float64, k::Array{Float64})\n\nConstructor for an input of a mixture of colloid-polimers in the monodisperse approximation [1].\n\nArguments\n\nϕ::Float64: Volume fraction of the colloid.\nϕₚ⁽ᴿ⁾::Float64: Volume fraction of the polimer.\nξ::Float64: Radius of gyration of the polimer.\nk::Array{Float64}: wave vector array.\n\nReferences\n\n[1] H. N. W. Lekkerkerker et al 1992 EPL 20 559\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.SM_StickyHS","page":"Stability Matrix","title":"NESCGLE.SM_StickyHS","text":"SM_StikyHS(ϕ::Float64, τ::Float64, k::Array{Float64})\n\nConstructor of an input for a Hard Sphere system.\n\nArguments\n\nϕ::Float64: volume fraction.\nτ::Float64: .\nk::Array{Float64}: wave vector array.\n\nReferences\n\n[1]\n\nContributed by O. Joaquín-Jaime\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.update_SM","page":"Stability Matrix","title":"NESCGLE.update_SM","text":"update_SM(sm::StabilityMatrix, params::Array{Float64}) -> StabilityMatrix\n\nUpdate the stability matrix with new parameters.\n\nArguments\n\nsm::StabilityMatrix: An instance of the StabilityMatrix type representing the current state of the system.\nparams::Array{Float64}: The new parameters to update in the stability matrix.\n\nReturns\n\nStabilityMatrix: A new instance of the StabilityMatrix with the updated parameters.\n\nExample\n\nsm = StabilityMatrix(\n    2, \n    [0.3, 300.0, 1.0, 1.5], \n    [\"Volume Fraction\", \"Temperature\", \"Param3\", \"Param4\"], \n    x -> 1.0 / (1.0 + x^2), \n    range(0.1, stop=10.0, length=100), \n    \"Colloidal Suspension\"\n)\nnew_params = [0.4, 320.0, 1.2, 1.6]\nupdated_sm = update_SM(sm, new_params)\nprintln(updated_sm)\n\n\n\n\n\nupdate_SM(sm::StabilityMatrix, S::Function) -> StabilityMatrix\n\nUpdate the structure factor of the stability matrix.\n\nArguments\n\nsm::StabilityMatrix: An instance of the StabilityMatrix type representing the current state of the system.\nS::Function: The new structure factor function to update in the stability matrix.\n\nReturns\n\nStabilityMatrix: A new instance of the StabilityMatrix with the updated structure factor.\n\nExample\n\nsm = StabilityMatrix(\n    2, \n    [0.3, 300.0, 1.0, 1.5], \n    [\"Volume Fraction\", \"Temperature\", \"Param3\", \"Param4\"], \n    x -> 1.0 / (1.0 + x^2), \n    range(0.1, stop=10.0, length=100), \n    \"Colloidal Suspension\"\n)\nnew_S = x -> 1.0 / (1.0 + 2*x^2)\nupdated_sm = update_SM(sm, new_S)\nprintln(updated_sm)\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.Copy","page":"Stability Matrix","title":"NESCGLE.Copy","text":"Copy(sm::StabilityMatrix) -> StabilityMatrix\n\nCreate a copy of the given stability matrix.\n\nArguments\n\nsm::StabilityMatrix: An instance of the StabilityMatrix type representing the current state of the system.\n\nReturns\n\nStabilityMatrix: A new instance of the StabilityMatrix that is a copy of the given stability matrix.\n\nExample\n\nsm = StabilityMatrix(\n    2, \n    [0.3, 300.0, 1.0, 1.5], \n    [\"Volume Fraction\", \"Temperature\", \"Param3\", \"Param4\"], \n    x -> 1.0 / (1.0 + x^2), \n    range(0.1, stop=10.0, length=100), \n    \"Colloidal Suspension\"\n)\n\nsm_copy = Copy(sm)\nprintln(sm_copy)\n\n\n\n\n\n","category":"function"},{"location":"SM/#NESCGLE.Lyapunov_Stability","page":"Stability Matrix","title":"NESCGLE.Lyapunov_Stability","text":"Lyapunov_Stability(smI::StabilityMatrix, smF::StabilityMatrix) -> Tuple{Float64, Float64}\n\nCalculate the Lyapunov stability and its derivative for a system transitioning from an initial to a final state.\n\nArguments\n\nsmI::StabilityMatrix: The stability matrix representing the initial state of the system.\nsmF::StabilityMatrix: The stability matrix representing the final state of the system.\n\nReturns\n\nTuple{Float64, Float64}: A tuple containing:\nΛ::Float64: The Lyapunov stability.\ndΛ::Float64: The derivative of the Lyapunov stability.\n\nExample\n\nsmI = StabilityMatrix(\n    2, \n    [0.3, 300.0, 1.0, 1.5], \n    [\"Volume Fraction\", \"Temperature\", \"Param3\", \"Param4\"], \n    x -> 1.0 / (1.0 + x^2), \n    range(0.1, stop=10.0, length=100), \n    \"Colloidal Suspension\"\n)\nsmF = StabilityMatrix(\n    2, \n    [0.4, 320.0, 1.2, 1.6], \n    [\"Volume Fraction\", \"Temperature\", \"Param3\", \"Param4\"], \n    x -> 1.0 / (1.0 + 2*x^2), \n    range(0.1, stop=10.0, length=100), \n    \"Colloidal Suspension\"\n)\n\nΛ, dΛ = Lyapunov_Stability(smI, smF)\nprintln(\"Lyapunov stability: \", Λ)\nprintln(\"Derivative of Lyapunov stability: \", dΛ)\n\n\n\n\n\n","category":"function"},{"location":"#NESCGLE.jl","page":"NESCGLE","title":"NESCGLE.jl","text":"","category":"section"},{"location":"","page":"NESCGLE","title":"NESCGLE","text":"Documentation for NESCGLE.jl","category":"page"},{"location":"#Main-process","page":"NESCGLE","title":"Main process","text":"","category":"section"},{"location":"","page":"NESCGLE","title":"NESCGLE","text":"(Image: Main)","category":"page"},{"location":"#Solver","page":"NESCGLE","title":"Solver","text":"","category":"section"},{"location":"","page":"NESCGLE","title":"NESCGLE","text":"NESCGLEsolver","category":"page"},{"location":"#NESCGLE.NESCGLEsolver","page":"NESCGLE","title":"NESCGLE.NESCGLEsolver","text":"NESCGLEsolver(sm::StabilityMatrix, pp::PreparationProtocol; kwds...)\n\nMain function of the NESCGLE system. The two main inputs of this function are the stability matrix and the preparation trotocol.\n\nArguments\n\nsm::StabilityMatrix Stability matrix of the problem\npp::PreparationProtocol preparation protocol\n\nOptional Arguments\n\nso=saving_options() Saving options \ntw = waiting_times() Intermediate waiting times grid\npath = \"\" save path\n\nExample of usage for a static process\n\nNk = 200\nkmax = 15*π; dk = kmax/Nk\nk = dk*(collect(1:Nk) .- 0.5)\nϕ = 0.5\nsm = SM_HS(ϕ, k)\npp = StaticProcess(sm.params)\nNESCGLEsolver(sm, pp, so = saving_options(true, true, false))\n\nExample of usage for a Instantaneous Process\n\nNk = 200\nkmax = 15*π; dk = kmax/Nk\nk = dk*(collect(1:Nk) .- 0.5)\nϕi = 0.5\nϕf = 0.6\nsm = SM_HS(ϕi, k)\npp = StaticProcess([ϕi, 1.0], [ϕf, 1.0])\nNESCGLEsolver(sm, pp, so = )\n\n\n\n\n\n","category":"function"},{"location":"","page":"NESCGLE","title":"NESCGLE","text":"","category":"page"},{"location":"#Sponsors","page":"NESCGLE","title":"Sponsors","text":"","category":"section"},{"location":"","page":"NESCGLE","title":"NESCGLE","text":"(Image: LANIMFE) (Image: MCT)","category":"page"},{"location":"PP/#Preparation-Protocol","page":"Preparation Protocol","title":"Preparation Protocol","text":"","category":"section"},{"location":"PP/","page":"Preparation Protocol","title":"Preparation Protocol","text":"PreparationProtocol\nStaticProcess\nInstantaneousProcess\nFiniteRate\nHysteresis","category":"page"},{"location":"PP/#NESCGLE.PreparationProtocol","page":"Preparation Protocol","title":"NESCGLE.PreparationProtocol","text":"PreparationProtocol(process::Vector{Any}, time::Vector{Float64}, str::String, rate::Float64)\n\nProtocol of preparation for the colloidal system.\n\nFields\n\nprocess::Vector{Any} represents the Array of parameters\ntime::Vector{Float64} represents the Array of time storage\nstr::String represents the Kind of process\nrate::Float64 represents the Velocity of the process\n\n\n\n\n\n","category":"type"},{"location":"PP/#NESCGLE.StaticProcess","page":"Preparation Protocol","title":"NESCGLE.StaticProcess","text":"StaticProcess(params::Vector{Float64})\n\nPrepararion protocol to use the Equilibrium version of the NESCGLE Theory.\n\n\n\n\n\n","category":"function"},{"location":"PP/#NESCGLE.InstantaneousProcess","page":"Preparation Protocol","title":"NESCGLE.InstantaneousProcess","text":"InstantaneousProcess(paramsI::Vector{Float64}, paramsF::Vector{Float64})\n\nPreparation protocol for a sudden change in thermodynamic conditions paramsI to parasmF.\n\n\n\n\n\n","category":"function"},{"location":"PP/#NESCGLE.FiniteRate","page":"Preparation Protocol","title":"NESCGLE.FiniteRate","text":"FiniteRate(paramsI::Vector{Float64}, paramsF::Vector{Float64}, α::Float64, N = 30)\n\nPreparation protocol for a finite rate α change in thermodynamic conditions paramsI to parasmF. This protocol is an extension of the instantaneous process and is approximated by a sequence of N finite instantaneous stepes.\n\n\n\n\n\n","category":"function"},{"location":"PP/#NESCGLE.Hysteresis","page":"Preparation Protocol","title":"NESCGLE.Hysteresis","text":"Hysteresis(paramsI::Vector{Float64}, paramsF::Vector{Float64}, α::Float64, N = 30)\n\nPreparation protocol for a hysteresis process at finite rate α between the thermodynamic conditions paramsI to parasmF. This protocol is an extension of the finite rate process and is approximated by a sequence of N finite instantaneous stepes for the initial evolution ramp and another N for the final evolutionr ramp.\n\n\n\n\n\n","category":"function"},{"location":"utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"utils/","page":"Utils","title":"Utils","text":"save_data\nmake_directory\nbisection\nsaving_options\nwaiting_times","category":"page"},{"location":"utils/#NESCGLE.save_data","page":"Utils","title":"NESCGLE.save_data","text":"save_data(nombre, formato; header = \"\", flag = true)\n\nSimple function to save data, this must be in the form [x y z ...] if you include a coma a transpose is saved.\n\nExample\n\nx = collect(1:10)\ny = x.^2\nsave_data(\"example.dat\", [x y])\n\n\n\n\n\n","category":"function"},{"location":"utils/#NESCGLE.make_directory","page":"Utils","title":"NESCGLE.make_directory","text":"make_directory(path::String) -> String\n\nCreate a directory if it does not already exist, and return the path with a trailing slash.\n\nArguments\n\npath::String: The path of the directory to create.\n\nReturns\n\nString: The path of the directory, with a trailing slash.\n\nExample\n\ndir_path = make_directory(\"data/experiment1\")\nprintln(\"Directory path: \", dir_path)\n\n\n\n\n\n","category":"function"},{"location":"utils/#NESCGLE.bisection","page":"Utils","title":"NESCGLE.bisection","text":"bisection(condition::Function, A::Real, T::Real, tolerance::Real; flag = false) Function to perform a sucessive bisection between two interest points.\n\nAccording to Zeno's paradox, Achilles can never catch up with the tortoise because he has an infinite number of finite catch-ups to make. This apparent paradox is used to argue that motion is impossible and is simply an illusion. When Achilles reaches the point where the tortoise started the race, the tortoise will have already moved on. The paradox concerns a race between the fleet-footed Achilles and a slow-moving tortoise. The two start moving at the same moment, but if the tortoise is initially given a head start and continues to move ahead, Achilles can run at any speed and will never catch up with it.\n\nArguments\n\ncondition::Function: Criteria to perform a step.\nA::Real: Initial condition.\nT::Real: Maximum position of the target.\ntolerance::Real: Tolerance. \n\nKeywords\n\nflag = false: flag to print the internal computing of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"utils/#NESCGLE.saving_options","page":"Utils","title":"NESCGLE.saving_options","text":"saving_options(SF::Bool, TP::Bool, tw::Bool, folder_creation::Bool)\n\nA type representing the options for saving different aspects of the NESCGLE computation results.\n\nFields\n\nSF::Bool: Indicates whether to save the structure factor.\nTP::Bool: Indicates whether to save the transport properties.\ntw::Bool: Indicates whether to save the waiting times.\nfolder_creation::Bool: Indicates whether to create a folder for saving the results.\n\nExample\n\noptions = saving_options(true, false, true, true)\n\n\n\n\n\n","category":"type"},{"location":"utils/#NESCGLE.waiting_times","page":"Utils","title":"NESCGLE.waiting_times","text":"waiting_times(n::Integer, N::Integer, t0::Float64) -> ExponentialGrid\n\nGenerate an exponential grid of waiting times for the NESCGLE computation.\n\nThe waiting time is the time after a nonequilibrium process is started, such as a sudden quench in temperature or a slow compression. It is the time after a colloidal system is thermodynamically stressed.\n\nArguments\n\nn::Integer: The number of waiting times to generate.\nN::Integer: The total number of time steps in the exponential grid.\nt0::Float64: The initial waiting time.\n\nReturns\n\nExponentialGrid: An exponential grid of waiting times.\n\nExample\n\ntw = waiting_times(10, 100, 1.0)\n\n\n\n\n\n","category":"function"}]
}
